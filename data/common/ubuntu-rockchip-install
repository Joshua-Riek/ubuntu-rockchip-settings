#!/bin/bash

set -eE 
trap 'echo Error: in $0 on line $LINENO' ERR

wait_loopdev() {
    local loop="$1"
    local seconds="$2"

    until test $((seconds--)) -eq 0 -o -b "${loop}"; do sleep 1; done

    ((++seconds))

    ls -l "${loop}" &> /dev/null
}

if [ "$(id -u)" -ne 0 ]; then 
    echo "$0: please run this command as root or with sudo"
    exit 1
fi

if test $# -ne 1; then
    echo "usage: $0 /dev/mmcblk0"
    exit 1
fi

disk=$1

if test ! -b "${disk}"; then
    echo "$0: block device '${disk}' not found"
    exit 1
fi

if [[ "/dev/$(lsblk -no pkname "$(findmnt -n -o SOURCE /)")" == "${disk}" ]]; then
    echo "$0: invalid block device '${disk}'"
    exit 1
fi

echo "This script will install the currently running system onto ${disk}."
read -r -p "It may take up to a few minutes - Continue? [y/N] " response
case "$response" in
    [yY][eE][sS]|[yY]) ;;
    *) exit 0 ;;
esac

# Ensure disk is not mounted
mount_point=/tmp/mnt
umount -lf "${disk}"* 2> /dev/null || true
umount -lf ${mount_point}/* 2> /dev/null || true
mkdir -p ${mount_point} 

echo -e "\nCreating partition table for ${disk}."

if [ "$(findmnt -n -o LABEL /)" == "desktop-rootfs" ]; then
    # Setup partition table
    dd if=/dev/zero of="${disk}" count=4096 bs=512 2> /dev/null
    parted --script "${disk}" \
    mklabel gpt \
    mkpart primary ext4 16MiB 100% 2> /dev/null

    # Create partitions
    {
        echo "t"
        echo "1"
        echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
        echo "w"
    } | fdisk "${disk}" &> /dev/null || true

    partprobe "${disk}" 1> /dev/null

    partition_char="$(if [[ ${disk: -1} == [0-9] ]]; then echo p; fi)"

    sleep 1

    wait_loopdev "${disk}${partition_char}1" 60 || {
        echo "$0: failure to create '${disk}${partition_char}1' in time"
        exit 1
    }

    sleep 1

    echo -e "Creating filesystem on partition ${disk}${partition_char}1."

    # Generate random uuid for rootfs
    root_uuid=$(uuidgen)

    systemctl daemon-reload

    # Create filesystems on partitions
    dd if=/dev/zero of="${disk}${partition_char}1" bs=1KB count=10 2> /dev/null
    mkfs.ext4 -U "${root_uuid}" -L desktop-rootfs "${disk}${partition_char}1" &> /dev/null

    # Mount partitions
    mkdir -p ${mount_point}/desktop-rootfs
    mount "${disk}${partition_char}1" ${mount_point}/desktop-rootfs/

    echo -e "\nCounting files..."
    count=$(rsync -xahvrltDn --delete --stats / ${mount_point}/desktop-rootfs/ | grep "Number of files:" | awk '{print $4}' | tr -d '.,')

    # Figure out if we have enough free disk space to copy the rootfs
    usage=$(df -BM | grep ^/dev | head -1 | awk '{print $3}' | tr -cd '[0-9]. \n')
    dest=$(df -BM | grep ^/dev | grep ${mount_point}/desktop-rootfs | awk '{print $4}' | tr -cd '[0-9]. \n')
    if [[ ${usage} -gt ${dest} ]]; then
        echo -e "\nPartition ${disk}${partition_char}1 is too small.\nNeeded: ${usage} MB Avaliable: ${dest} MB"
        exit 1
    fi

    echo "Transferring $count files (${usage} MB) from desktop-rootfs to ${disk}${partition_char}1. Please wait!"
    rsync -xavrltD --delete / ${mount_point}/desktop-rootfs/ >/dev/null 2>&1

    # Run rsync again to catch outstanding changes
    echo -e "Cleaning up...\n"
    rsync -xavrltD --delete / ${mount_point}/desktop-rootfs/ >/dev/null 2>&1

    # Update fstab entries
    echo "# <file system>     <mount point>  <type>  <options>   <dump>  <fsck>" > ${mount_point}/desktop-rootfs/etc/fstab
    echo "UUID=${root_uuid,,} /              ext4    defaults,x-systemd.growfs    0       1" >> ${mount_point}/desktop-rootfs/etc/fstab

    # Let systemd create machine id on first boot
    rm -f ${mount_point}/desktop-rootfs/var/lib/dbus/machine-id
    true > ${mount_point}/desktop-rootfs/etc/machine-id

    # Update extlinux
    chroot ${mount_point}/desktop-rootfs/ u-boot-update >/dev/null 2>&1

    sync --file-system
    sync

    # Umount partitions
    umount "${disk}${partition_char}1"
else
    # Setup partition table
    dd if=/dev/zero of="${disk}" count=4096 bs=512 2> /dev/null
    parted --script "${disk}" \
    mklabel gpt \
    mkpart primary fat32 16MiB 20MiB \
    mkpart primary ext4 20MiB 100% 2> /dev/null

    # Create partitions
    {
        echo "t"
        echo "1"
        echo "EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"
        echo "t"
        echo "2"
        echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
        echo "w"
    } | fdisk "${disk}" &> /dev/null || true

    partprobe "${disk}" 1> /dev/null

    partition_char="$(if [[ ${disk: -1} == [0-9] ]]; then echo p; fi)"

    sleep 1

    wait_loopdev "${disk}${partition_char}2" 60 || {
        echo "Failure to create ${disk}${partition_char}1 in time"
        exit 1
    }

    sleep 1

    wait_loopdev "${disk}${partition_char}1" 60 || {
        echo "Failure to create ${disk}${partition_char}1 in time"
        exit 1
    }

    sleep 1

    echo -e "Creating filesystem on partitions ${disk}${partition_char}1 and ${disk}${partition_char}2.\n"

    # Generate random uuid for bootfs
    boot_uuid=$(uuidgen | head -c8)

    # Generate random uuid for rootfs
    root_uuid=$(uuidgen)

    systemctl daemon-reload

    # Create filesystems on partitions
    mkfs.vfat -i "${boot_uuid}" -F32 -n CIDATA "${disk}${partition_char}1" &> /dev/null
    dd if=/dev/zero of="${disk}${partition_char}2" bs=1KB count=10 > /dev/null  2> /dev/null
    mkfs.ext4 -U "${root_uuid}" -L cloudimg-rootfs "${disk}${partition_char}2" &> /dev/null

    # Mount partitions
    mkdir -p ${mount_point}/{CIDATA,cloudimg-rootfs} 
    mount "${disk}${partition_char}1" ${mount_point}/CIDATA
    mount "${disk}${partition_char}2" ${mount_point}/cloudimg-rootfs

    tmpdir=$(mktemp -d)
    cidata="$(findmnt -n -o SOURCE /)"
    mount ${cidata::-1}1 ${tmpdir}

    echo "Counting files..."
    count=$(rsync -xahvrltDn --delete --stats "${tmpdir}"/* ${mount_point}/CIDATA/ | grep "Number of files:" | awk '{print $4}' | tr -d '.,')

    # Figure out if we have enough free disk space to copy the bootfs
    usage=$(df -BM | grep ^/dev | head -2 | tail -n 1 | awk '{print $3}' | tr -cd '[0-9]. \n')
    dest=$(df -BM | grep ^/dev | grep ${mount_point}/CIDATA | awk '{print $4}' | tr -cd '[0-9]. \n')
    if [[ ${usage} -gt ${dest} ]]; then
        echo -e "\nPartition ${disk}${partition_char}1 is too small.\nNeeded: ${usage} MB Avaliable: ${dest} MB"
        umount -lf "${disk}${partition_char}1" 2> /dev/null || true
        exit 1
    fi

    echo "Transferring $count files (${usage} MB) from CIDATA to ${disk}${partition_char}1. Please wait!"
    rsync -xavrltD --delete "${tmpdir}"/*  ${mount_point}/CIDATA/ >/dev/null 2>&1

    # Run rsync again to catch outstanding changes
    echo "Cleaning up..."
    rsync -xavrltD --delete "${tmpdir}"/*  ${mount_point}/CIDATA/ >/dev/null 2>&1
    umount ${cidata::-1}1

    echo -e "\nCounting files..."
    count=$(rsync -xahvrltDn --delete --stats / ${mount_point}/cloudimg-rootfs/ | grep "Number of files:" | awk '{print $4}' | tr -d '.,')

    # Figure out if we have enough free disk space to copy the rootfs
    usage=$(df -BM | grep ^/dev | head -1 | awk '{print $3}' | tr -cd '[0-9]. \n')
    dest=$(df -BM | grep ^/dev | grep ${mount_point}/cloudimg-rootfs | awk '{print $4}' | tr -cd '[0-9]. \n')
    if [[ ${usage} -gt ${dest} ]]; then
        echo -e "\nPartition ${disk}${partition_char}2 is too small.\nNeeded: ${usage} MB Avaliable: ${dest} MB"
        umount -lf "${disk}${partition_char}2" 2> /dev/null || true
        exit 1
    fi

    echo "Transferring $count files (${usage} MB) from cloudimg-rootfs to ${disk}${partition_char}2. Please wait!"
    rsync -xavrltD --delete / ${mount_point}/cloudimg-rootfs/ >/dev/null 2>&1

    # Run rsync again to catch outstanding changes
    echo -e "Cleaning up...\n"
    rsync -xavrltD --delete / ${mount_point}/cloudimg-rootfs/ >/dev/null 2>&1

    # Update fstab entries
    echo "# <file system>     <mount point>  <type>  <options>   <dump>  <fsck>" > ${mount_point}/cloudimg-rootfs/etc/fstab
    echo "UUID=${root_uuid,,} /              ext4    defaults,x-systemd.growfs    0       1" >> ${mount_point}/cloudimg-rootfs/etc/fstab

    # Let systemd create machine id on first boot
    rm -f ${mount_point}/cloudimg-rootfs/var/lib/dbus/machine-id
    true > ${mount_point}/cloudimg-rootfs/etc/machine-id

    # Update extlinux
    chroot ${mount_point}/cloudimg-rootfs/ u-boot-update >/dev/null 2>&1

    sync --file-system
    sync

    # Umount partitions
    umount "${disk}${partition_char}1"
    umount "${disk}${partition_char}2"
fi

# Write the bootloader
if [ -f /usr/lib/u-boot/u-boot-rockchip.bin ]; then
    dd if=/usr/lib/u-boot/u-boot-rockchip.bin of="${disk}" seek=1 bs=32k conv=fsync 2> /dev/null
else
    dd if=/usr/lib/u-boot/idbloader.img of="${disk}" seek=64 conv=notrunc 2> /dev/null
    dd if=/usr/lib/u-boot/u-boot.itb of="${disk}" seek=16384 conv=notrunc 2> /dev/null
fi

sync --file-system
sync

sleep 2

echo -e "Done!"
